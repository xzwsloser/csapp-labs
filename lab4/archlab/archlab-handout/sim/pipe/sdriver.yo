                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6e802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # Loop header
0x032: 6222                 |     andq %rdx,%rdx      # len <= 0?
0x034: 704701000000000000   |     jmp test
0x03d:                      | Loop:
0x03d: 50870000000000000000 |     mrmovq (%rdi),%r8
0x047: 50970800000000000000 |     mrmovq 8(%rdi),%r9
0x051: 6288                 |     andq %r8,%r8
0x053: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x05d: 40960800000000000000 |     rmmovq %r9,8(%rsi)
0x067: 717a00000000000000   |     jle Loop1
0x070: c0f00100000000000000 |     iaddq $1,%rax
0x07a:                      | Loop1:  
0x07a: 6299                 |     andq %r9,%r9
0x07c: 718f00000000000000   |     jle Loop2
0x085: c0f00100000000000000 |     iaddq $1,%rax
0x08f:                      | Loop2:
0x08f: 50871000000000000000 |     mrmovq 16(%rdi),%r8
0x099: 50971800000000000000 |     mrmovq 24(%rdi),%r9
0x0a3: 6288                 |     andq %r8,%r8
0x0a5: 40861000000000000000 |     rmmovq %r8,16(%rsi)
0x0af: 40961800000000000000 |     rmmovq %r9,24(%rsi)
0x0b9: 71cc00000000000000   |     jle Loop3
0x0c2: c0f00100000000000000 |     iaddq $1,%rax
0x0cc:                      | Loop3:  
0x0cc: 6299                 |     andq %r9,%r9
0x0ce: 71e100000000000000   |     jle Loop4
0x0d7: c0f00100000000000000 |     iaddq $1,%rax
0x0e1:                      | Loop4:
0x0e1: 50872000000000000000 |     mrmovq 32(%rdi),%r8
0x0eb: 50972800000000000000 |     mrmovq 40(%rdi),%r9
0x0f5: 6288                 |     andq %r8,%r8
0x0f7: 40862000000000000000 |     rmmovq %r8,32(%rsi)
0x101: 40962800000000000000 |     rmmovq %r9,40(%rsi)
0x10b: 711e01000000000000   |     jle Loop5
0x114: c0f00100000000000000 |     iaddq $1,%rax
0x11e:                      | Loop5:
0x11e: c0f73000000000000000 |     iaddq $48,%rdi
0x128: c0f63000000000000000 |     iaddq $48,%rsi      
0x132: 6299                 |     andq %r9,%r9
0x134: 714701000000000000   |     jle test
0x13d: c0f00100000000000000 |     iaddq $1,%rax
0x147:                      | test:
0x147: c0f2faffffffffffffff |     iaddq $-6, %rdx         # 先减，判断够不够6个
0x151: 753d00000000000000   |     jge Loop                # 6路展开
0x15a: c0f20600000000000000 |     iaddq $6, %rdx
0x164: 70fc01000000000000   |     jmp test2               #剩下的
                            | 
0x16d:                      | L:
0x16d: 50870000000000000000 |     mrmovq (%rdi),%r8
0x177: 6288                 |     andq %r8,%r8
0x179: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x183: 719601000000000000   |     jle L1
0x18c: c0f00100000000000000 |     iaddq $1,%rax
0x196:                      | L1:
0x196: 50870800000000000000 |     mrmovq 8(%rdi),%r8
0x1a0: 6288                 |     andq %r8,%r8
0x1a2: 40860800000000000000 |     rmmovq %r8,8(%rsi)
0x1ac: 71bf01000000000000   |     jle L2
0x1b5: c0f00100000000000000 |     iaddq $1,%rax
0x1bf:                      | L2:
0x1bf: 50871000000000000000 |     mrmovq 16(%rdi),%r8
0x1c9: c0f71800000000000000 |     iaddq $24,%rdi
0x1d3: 40861000000000000000 |     rmmovq %r8,16(%rsi)
0x1dd: c0f61800000000000000 |     iaddq $24,%rsi
0x1e7: 6288                 |     andq %r8,%r8
0x1e9: 71fc01000000000000   |     jle test2
0x1f2: c0f00100000000000000 |     iaddq $1,%rax
0x1fc:                      | test2:
0x1fc: c0f2fdffffffffffffff |     iaddq $-3, %rdx         # 先减，判断够不够3个
0x206: 756d01000000000000   |     jge L
0x20f: c0f20200000000000000 |     iaddq $2, %rdx          # -1则不剩了，直接Done,0 剩一个, 1剩2个
0x219: 738602000000000000   |     je R0
0x222: 72af02000000000000   |     jl Done
0x22b: 50870000000000000000 |     mrmovq (%rdi),%r8
0x235: 50970800000000000000 |     mrmovq 8(%rdi),%r9
0x23f: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x249: 40960800000000000000 |     rmmovq %r9,8(%rsi)
0x253: 6288                 |     andq %r8,%r8
0x255: 716802000000000000   |     jle R2
0x25e: c0f00100000000000000 |     iaddq $1,%rax
0x268:                      | R2:
0x268: 6299                 |     andq %r9,%r9
0x26a: 71af02000000000000   |     jle Done
0x273: c0f00100000000000000 |     iaddq $1,%rax
0x27d: 70af02000000000000   |     jmp Done
0x286:                      | R0:
0x286: 50870000000000000000 |     mrmovq (%rdi),%r8
0x290: 6288                 |     andq %r8,%r8
0x292: 40860000000000000000 |     rmmovq %r8,(%rsi)
0x29c: 71af02000000000000   |     jle Done
0x2a5: c0f00100000000000000 |     iaddq $1,%rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2af:                      | Done:
0x2af: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2b0:                      | End:
                            | #/* $end ncopy-ys */
0x2b0:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2b0:                      | 	.align 8
0x2b0:                      | src:
0x2b0: 0100000000000000     | 	.quad 1
0x2b8: 0200000000000000     | 	.quad 2
0x2c0: fdffffffffffffff     | 	.quad -3
0x2c8: fcffffffffffffff     | 	.quad -4
0x2d0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2e0:                      | 	.align 16
0x2e0:                      | Predest:
0x2e0: fadebc0000000000     | 	.quad 0xbcdefa
0x2e8:                      | dest:
0x2e8: abefcd0000000000     | 	.quad 0xcdefab
0x2f0: abefcd0000000000     | 	.quad 0xcdefab
0x2f8: abefcd0000000000     | 	.quad 0xcdefab
0x300: abefcd0000000000     | 	.quad 0xcdefab
0x308:                      | Postdest:
0x308: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x310:                      | .align 8
                            | # Run time stack
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
                            | 
0x390:                      | Stack:
